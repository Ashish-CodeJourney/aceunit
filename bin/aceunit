#!/bin/bash

tool=objdump
name=fixtures

usage() {
    echo "Usage: $0 [-h] [-p PATTERN] [-t TOOL] OBJECT_FILE..." 1>&2
}

version() {
    echo "$0 version 1.0"
}

setType() {
    case "$1" in
    objdump) tool=objdump ;;
    nm) tool=nm ;;
    readelf) tool=readelf ;;
    *) echo "$0: error: unsupported symbol table tool '$1'" >&2 ; exit 1 ;;
    esac
}

help() {
    usage
    cat <<END
Generate AceUnit fixture list from compiled testcase object files.
The generated test suite is written to STDOUT.

Options:
  -b BINARY   Use BINARY instead of the default for the selected tool.
              Example: -b m68k-amigaos-objdump
  -h          Display this help text and stop.
  -n NAME     Use NAME instead of fixtures for the fixture table.
  -p PATTERN  Prefix test functions with the specified regex PATTERN;
              PATTERN needs to be understood by grep.
              Example: -p '[^_]\+_' to allow any pattern prefix followed by an underscore.
  -s PATTERN  Strip this prefix PATTERN from symbols before using them;
              PATTERN needs to be understood by grep.
              Example: -s _ to strip a leading underscore from the symbol names.
  -t TOOL     Use TOOL for displaying the symbol table.
              Defaults to objdump.
              Built-in alternatives: nm, readelf.
  -v          Print version information and stop.

Examples:
  $0 leapyear_test.o >testcases.c
    Scans leapyear_test.o for test functions and generates the test fixtures in testcases.c.

  $0 -t nm -b m68k-amigaos-nm -s _ leapyear_test.o >testcases.c
    Scans leapyear_test.o for test functions and generates the test fixtures in testcase.c.
    Uses nm to get the symbol table, with m68k-amigaos-nm as the binary of nm, and stripping leading underscores from the symbol names.
END
    exit 0
}

function getSymbols() {
    if ! which "$binary" >/dev/null ; then
        echo "$binary: File not found." 1>&2
        exit 2
    fi
    case "${tool}" in
    objdump) $binary -t "$1" | grep -E ' g     [F ] .text[	 ]+' | sed -e 's/.* '$strip'//' | grep '^\('$2$3'\)' ;;
    nm)      $binary    "$1" | grep -E ' T '                       | sed -e 's/.* '$strip'//' | grep '^\('$2$3'\)' ;;
    readelf) $binary -s "$1" | grep -E ' FUNC    GLOBAL DEFAULT '  | sed -e 's/.* '$strip'//' | grep '^\('$2$3'\)' ;;
    *) echo "$0: internal error: Unsupported tool ${tool}" 1>&2 ; exit 2 ;;
    esac
}

prefix=

while getopts "b:hn:p:s:t:v" o; do
    case "${o}" in
    b) binary="$OPTARG" ;;
    h) help ;;
    n) name="$OPTARG" ;;
    p) prefix="$OPTARG" ;;
    s) strip="$OPTARG" ;;
    t) setType "$OPTARG" ;;
    v) version; exit 0 ;;
    *) usage; exit 1 ;;
    esac
done

shift $((OPTIND - 1))
fixtures=$@
declare -A beforeAll afterAll beforeEach afterEach testcases

if [[ -z "$binary" ]] ; then
    binary=$tool
fi

for file in $fixtures; do
    basename=${file%.o}
     beforeAll[$basename]=$(getSymbols $file $prefix beforeAll)
      afterAll[$basename]=$(getSymbols $file $prefix afterAll)
    beforeEach[$basename]=$(getSymbols $file $prefix beforeEach)
     afterEach[$basename]=$(getSymbols $file $prefix afterEach)
     testcases[$basename]=$(getSymbols $file $prefix test)
done

cat << END
#include <aceunit.h>

END
for file in $fixtures; do
    basename=${file%.o}
    if [ -z "${testcases[$basename]}" ]; then echo "$@: warning: No test cases found." 1>&2; fi
    for extern in ${beforeAll[$basename]} ${afterAll[$basename]} ${beforeEach[$basename]} ${afterEach[$basename]} ${testcases[$basename]}; do echo "extern void $extern(void);"; done
done
for file in $fixtures; do
    basename=${file%.o}
    echo
    echo "void (*const testcases_$basename[])(void) = {"
    for testcase in ${testcases[$basename]}; do echo "    $testcase,"; done
    cat << END
    NULL,
};

const AceUnit_Fixture_t fixture_$basename = {
    ${beforeAll[$basename]:-NULL},
    ${afterAll[$basename]:-NULL},
    ${beforeEach[$basename]:-NULL},
    ${afterEach[$basename]:-NULL},
    testcases_$basename,
};

END
done
cat <<END
const AceUnit_Fixture_t *$name[] = {
END
for file in $fixtures; do
    basename=${file%.o}
    echo "    &fixture_$basename,"
done
cat <<END
    NULL,
};
END
