#!/bin/bash

tool=objdump

usage() {
    echo "Usage: $0 [-h] [-p PATTERN] [-t TOOL] OBJECT_FILE..." 1>&2
}

version() {
    echo "$0 version 1.0"
}

setType() {
    case "$1" in
    objdump) tool=objdump ;;
    nm) tool=nm ;;
    readelf) tool=readelf ;;
    *) echo "$0: error: unsupported symbol table tool '$1'" >&2 ; exit 1 ;;
    esac
}

help() {
    usage
    cat <<END
Generate AceUnit fixture list from compiled testcase object files.
The generated test suite is written to STDOUT.

Options:
  -h          Display this help text and stop.
  -p PATTERN  Prefix test functions with the specified pattern;
              PATTERN needs to be a regular expression understood by grep.
              Example: '[^_]\+_' to allow any pattern prefix with an underscore.
  -t TOOL     Use TOOL for displaying the symbol table.
              Defaults to objdump.
              Built-in alternatives: nm, readelf
  -v          Print version information and stop.

Examples:
  $0 leapyear_test.o >testcases.c
    Scans leapyear_test.o for test functions and generates the test fixtures in testcases.c.
END
    exit 0
}

function getSymbols() {
    case "${tool}" in
    objdump) $tool -t $1 | grep -E ' g     F .text	'     | sed -e 's/.* //' | grep '^\('$2$3'\)' ;;
    nm)      $tool    $1 | grep -E ' T '                      | sed -e 's/.* //' | grep '^\('$2$3'\)' ;;
    readelf) $tool -s $1 | grep -E ' FUNC    GLOBAL DEFAULT ' | sed -e 's/.* //' | grep '^\('$2$3'\)' ;;
    *) echo "$0: internal error: Unsupported tool ${tool}" 1>&2 ; exit 2 ;;
    esac
}

prefix=

while getopts "hp:t:v" o; do
    case "${o}" in
    h) help ;;
    p) prefix=$OPTARG ;;
    t) setType $OPTARG ;;
    v) version; exit 0 ;;
    *) usage; exit 1 ;;
    esac
done

shift $((OPTIND - 1))
fixtures=$@
declare -A beforeAll afterAll beforeEach afterEach testcases

for file in $fixtures; do
    basename=${file%.o}
     beforeAll[$basename]=$(getSymbols $file $prefix beforeAll)
      afterAll[$basename]=$(getSymbols $file $prefix afterAll)
    beforeEach[$basename]=$(getSymbols $file $prefix beforeEach)
     afterEach[$basename]=$(getSymbols $file $prefix afterEach)
     testcases[$basename]=$(getSymbols $file $prefix test)
done

cat << END
#include <aceunit.h>

END
for file in $fixtures; do
    basename=${file%.o}
    if [ -z "${testcases[$basename]}" ]; then echo "$@: warning: No test cases found." 1>&2; fi
    for extern in ${beforeAll[$basename]} ${afterAll[$basename]} ${beforeEach[$basename]} ${afterEach[$basename]} ${testcases[$basename]}; do echo "extern void $extern(void);"; done
done
for file in $fixtures; do
    basename=${file%.o}
    echo
    echo "void (*const testcases_$basename[])(void) = {"
    for testcase in ${testcases[$basename]}; do echo "    $testcase,"; done
    cat << END
    NULL,
};

const AceUnit_Fixture_t fixture_$basename = {
    ${beforeAll[$basename]:-NULL},
    ${afterAll[$basename]:-NULL},
    ${beforeEach[$basename]:-NULL},
    ${afterEach[$basename]:-NULL},
    testcases_$basename,
};

END
done
cat <<END
const AceUnit_Fixture_t *fixtures[] = {
END
for file in $fixtures; do
    basename=${file%.o}
    echo "    &fixture_$basename,"
done
cat <<END
    NULL,
};
END
